# Generated by CodiumAI !!!!
import ast
from unittest.mock import Mock

import pytest

from fun_with_ast.source_matchers.reset_match import ResetMatch


class TestResetMatch:
    pass
    #  All nodes with a 'node_matcher' attribute have their 'matched' and 'matched_source' fields reset to False and None, respectively.
    # the test is INCORRECT -- e.g., line 30
    # The real problem is that the generator does not know how to generate ast node that it does not see in the code
    # def test_reset_match_matched_and_matched_source(self):
    #     node1 = ast.Load()
    #     node1.node_matcher = Mock()
    #     node1.node_matcher.matched = True
    #     node1.node_matcher.matched_source = "source1"
    #
    #     node2 = ast.Store()
    #     node2.node_matcher = Mock()
    #     node2.node_matcher.matched = True
    #     node2.node_matcher.matched_source = "source2"
    #
    #     node3 = ast.Del()
    #     node3.node_matcher = Mock()
    #     node3.node_matcher.matched = True
    #     node3.node_matcher.matched_source = "source3"
    #
    #     node4 = ast.Load()
    #     node4.node_matcher = Mock()
    #     node4.node_matcher.matched = False
    #     node4.node_matcher.matched_source = "source4"
    #
    #     reset_match_obj = ResetMatch(node1)
    #     reset_match_obj.reset_match()
    #
    #     assert node1.node_matcher.matched == False
    #     assert node1.node_matcher.matched_source == None
    #
    #     reset_match_obj = ResetMatch(node2)
    #     reset_match_obj.reset_match()
    #
    #     assert node2.node_matcher.matched == False
    #     assert node2.node_matcher.matched_source == None
    #
    #     reset_match_obj = ResetMatch(node3)
    #     reset_match_obj.reset_match()
    #
    #     assert node3.node_matcher.matched == False
    #     assert node3.node_matcher.matched_source == None
    #
    #     reset_match_obj = ResetMatch(node4)
    #     reset_match_obj.reset_match()
    #
    #     assert node4.node_matcher.matched == False
    #     assert node4.node_matcher.matched_source == None

    #  Nodes without a 'node_matcher' attribute or with a valid attribute in 'no_matchers_ok' are skipped without raising an exception.
    # the test is INCORRECT
    # while there no exception as stated the code never get to settings the asserts in line 74
    # def test_reset_match_skip_nodes(self):
    #     node1 = ast.Load()
    #     node1.node_matcher = Mock()
    #
    #     node2 = ast.Store()
    #
    #     node3 = ast.Del()
    #
    #     reset_match_obj = ResetMatch(node1)
    #     reset_match_obj.reset_match()
    #
    #     assert node1.node_matcher.matched == False
    #     assert node1.node_matcher.matched_source == None
    #
    #     reset_match_obj = ResetMatch(node2)
    #     reset_match_obj.reset_match()
    #
    #     assert True
    #
    #     reset_match_obj = ResetMatch(node3)
    #     reset_match_obj.reset_match()
    #
    #     assert True

    #  If a node without a 'node_matcher' attribute is not in 'no_matchers_ok', an exception is raised.
    # the test is INCORRECT
    # The generator does not know how to generate ast node that in Not load (line 92)
    # Added line #93 but the test still fails because the constructor call to 'validate' in line #94
    # def test_reset_match_no_node_matcher(self):
    #     #node = ast.Load()
    #     node = ast.Name
    #     reset_match_obj = ResetMatch(node)
    #
    #     with pytest.raises(Exception) as e:
    #         reset_match_obj.reset_match()
    #
    #     assert str(e.value) == 'node does not have node_matcher attribute'

    #  If a node has a 'node_matcher' attribute with a 'matched_text' field, a ValueError is raised.
